continue
@user
continue
manual
continue
manual == true
manual
continue
manual ? 1 : 0
if manual
manual
exit
entries.first.blank?
entries.any?.blank?
entries.any?
entries.any.blank?
entries.blank?
entries
results.blank?
results
continue
@entries
session[:entry_params]["date"] ? 1 : 2
if session[:entry_params]["date"]
session[:entry_params]["date"]
session[:entry_params]
continue
parse_session[:entries].first[:date].to_datetime > parse_session[:interventions].first["end"].to_datetime
parse_session[:interventions].first["end"].to_datetime
parse_session[:interventions]
parse_session[:entries].first[:date].to_datetime
parse_session[:entries].first[:date]
parse_session[:entries].first
parse_session[:entries]
session[:intervention_params]
continuesession[:intervention_params]
continue
session[:intervention_params] = parse_session[:interventions].delete_if{|i| i["start"].to_datetime > parse_session[:entries].last[:date].to_datetime || i["end"].to_datetime < parse_session[:entries].first[:date].to_datetime }
session[:intervention_params] = parse_session[:interventions].each_with_index{|v,k| puts v.deep_merge!({"index" => (k)})}
session[:intervention_params] = (@interventions + session[:intervention_params]).uniq
parse_session
parse_Session
@interventions
continue
exit
continue
entry[:id]
entry
continue
entries["db_value"][symbol.parameterize.underscore][]
symbol.parameterize.underscore
symbol.parameterize
symbol
entries["db_value"]
entries
continue
entries
continue
exit
a.first[:id]exit
a.first[:id].deep_merge!({:hdl => 80})
a.first[:id]
a.first[:id].deep_merge!({:ldl => 60})
a.first[:id]
a[:id]
a.first.deep_merge!({id: {}})
a.deep_merge!({id: {}})
a = Array.new(5) { Hash.new }
a.first[:id].deep_merge!({:ldl => 1})
a = Array.new(5) { Hash.new }
a.first[:id].deep_merge!({:ldl => 1})
a.first[:id]
a.first
a = Array.new(5) { Hash.new(id: Hash.new) }
Array.new(5) { Hash.new(id: Hash.new) }
entries.first[:id]
entries.first
entries
continue
entries
entry[:id]
entry
entry[:id]
key.parameterize.underscore.to_sym
key.parameterize.underscore
key.parameterize
key
"#{entry[:id][key.parameterize.underscore.to_sym]}"
"entry[db_value[#{key.parameterize.underscore}[#{(index+1)}]]]"
continue
session[:chart_params]["type"].safe_constantize.parse_entries
session[:chart_params]["type"].safe_constantize
session[:chart_params]["type"]
continue
entry[:vitamin_d]
chart_class.safe_constantize.keys.each {|key| puts key.parameterize.underscore.to_sym  }
chart_class.safe_constantize.keys.each {|key| puts key  }
key
entry[key.parameterize.underscore.to_sym]
entry[key.parameterize.underscore]
entryentry[key.parameterize.underscore]
entry
continue
exit
continue
exit
continue
entries[i]
exit
continue
{key.parameterize('_').to_sym => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
{key.parameterize('_') => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
{key.underscore => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
{key.underscore.to_sym => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
{key.to_s.downcase.to_sym => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
"#{i}"
entries[i]
#{i}
i
exit
session[:entry_params]
continue
parse_session
session[:chart_params]["type"] == "Cholesterol"
parse_session[:entries]
session[:intervention_params] = parse_session[:interventions].delete_if{|i| i["start"].to_datetime > parse_session[:entries].last[:date].to_datetime || i["end"].to_datetime < parse_session[:entries].first[:date].to_datetime }
session[:intervention_params] = parse_session[:interventions].each_with_index{|v,k| puts v.deep_merge!({"index" => (k)})}
session[:intervention_params] = (@interventions + session[:intervention_params]).uniq
@interventions
continue
entries
continue
entries
continue
results.each_with_index{|v,i| puts entries[index]}
results.each_with_index{|v,i| puts entries[i]}
results.each_with_index{|v,i| puts i}
results.size
results
continue
results.each{|result| puts result.value}
results
results = Entry.select("value").where(user_id: user_id).where(chart_type: chart_type).where(symbol: "LDL").order('date DESC').limit(5).reverse
Entry.select("value").where(user_id: user_id).where(chart_type: chart_type).where(symbol: "LDL").order('date DESC').limit(5).reverse
entries
continue
entries
continue
entries
continue
entries
continue
entries.each{|e| e.group_by{|i| i.symbol}}.second
entries.each{|e| e.group_by{|i| i.symbol}}.first
entries.each{|e| e.group_by{|i| i.symbol}}.class
entries.each{|e| e.group_by{|i| i.symbol}}
entries.each{|e| e.group_by{|i| i.symbol}}.map(&:first)
entries.each{|e| e.group_by{|i| i.symbol}}
entries.each{|e| e.group_by{|i| puts i.symbol}}
entries.each{|e| e.group_by{|i| puts i.class }}
entries.each{|e| e.each{|i| puts e.first.class }}
entries.each{|e| e.each{|i| puts e.first }}
entries.each{|e| e.each{|i| puts e.class }}
entries.each{|e| e.each{|i| puts e[:symbol] }}
entries.each{|e| e.each{|i| puts e.symbol }}
entries.each{|e| e.each{|i| puts e }}
entries.each{|e| e.group_by{|i| i.symbol}}
entries.each.group_by{|i| i.symbol}
Entry.all.group_by { |t| t.symbol }
Entry.all.group_by { |t| t.created_at.beginning_of_month }
entries.group_by { |t| t.created_at.beginning_of_month }
continue
entries.each(:&).group_by{|i| i["symbol"]}
entries.each.group_by{|i| i["symbol"]}
entries.fourth.group_by{|i| i["symbol"]}
entries.third.group_by{|i| i["symbol"]}
entries.second.group_by{|i| i["symbol"]}
entries.first.group_by{|i| i["symbol"]}
entries.each{|e| e.group_by{|i| i[:symbol]}}
entries.each{|e| puts e}
entries.second
entries.first
entries
continue
entries
entries.each{|e| puts e}
entries.each{|e| e.group_by{|i| i["symbol"]}}
entries.first.group_by{|i| i["symbol"]}
entries.first.first
entries.first.symbol
entries.group_by{|i| i["symbol"]}
entries.group_by{|i| i.symbol}
entries.group_by{|i| i}
entries.group_by{|i| i[:symbol]}
entries.group_by(:symbol)
entries
continue
parse_session[:interventions].delete_if{|i| i["start"].to_datetime > parse_session[:entries].last[:date].to_datetime || i["end"].to_datetime < parse_session[:entries].first[:date].to_datetime } 
parse_session[:interventions].delete_if{|i| i["start"].to_datetime > parse_session[:entries].last[:date].to_datetime || i["end"].to_datetime < parse_session[:entries].first[:date].to_datetime } }
parse_session[:interventions].each{|intervention| intervention.delete_if{|i| i["start"].to_datetime > parse_session[:entries].last[:date].to_datetime || i["end"].to_datetime < parse_session[:entries].first[:date].to_datetime } }
parse_session[:interventions].each{|intervention| puts intervention["end"].to_datetime > parse_session[:entries].first[:date].to_datetime }
parse_session[:interventions].each{|intervention| puts parse_session[:entries].first[:date].to_datetime }
parse_session[:interventions].each{|intervention| puts parse_session[:entries].first[:date] }
parse_session[:interventions].each{|intervention| puts parse_session[:entries].first }
parse_session[:interventions].each{|intervention| puts intervention["end"].to_datetime }
parse_session[:interventions].each{|intervention| puts intervention["end"].to_date }
parse_session[:interventions].each{|intervention| puts intervention["end"] }
parse_session[:interventions].each{|intervention| puts intervention }
parse_session[:interventions].each{|intervention| intervention.each{|i| puts  DateTime.parse(i["start"]) } }
parse_session[:interventions].each{|intervention| intervention.delete_if{|i| DateTime.parse(i["start"]) > DateTime.parse(parse_session[:entries].last[:date]) || DateTime.parse(i["end"]) < DateTime.parse(parse_session[:entries].first[:date]) } }
parse_session[:interventions].each{|intervention| intervention.delete_if{|i| i["start"] > DateTime.parse(parse_session[:entries].last[:date]) || i["end"] < DateTime.parse(parse_session[:entries].first[:date]) } }
parse_session[:interventions].each{|intervention| intervention.delete_if{|i| i["start"].to_date > DateTime.parse(parse_session[:entries].last[:date]) || i["end"].to_date < DateTime.parse(parse_session[:entries].first[:date]) } }
parse_session[:interventions].each{|intervention| intervention.delete_if{|i| i["start"].to_date > parse_session[:entries].last[:date].to_date || i["end"].to_date < parse_session[:entries].first[:date].to_date } }
parse_session[:interventions]
parse_session[:entries]
parse_session
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
continue
session[:intervention_params] 
parse_session[:interventions] 
session[:interventions_params] 
@interventions
continue
session[:interventions_params] 
session[:interventions_params] = parse_session[:interventions]+ @interventions
parse_session[:interventions]
parse_session[:interventions] = parse_session[:interventions]+ @interventions
