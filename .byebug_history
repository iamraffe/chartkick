continue
entries
exit
entries
continue
index
chart_class.safe_constantize.keys
chart_class
continue
@intervention.to_json
@intervention
continue
!params[:intervention]["save-and-exit"].nil?
continue
!params[:intervention]["save-and-exit"].nil?
continue
!params[:intervention]["save-and-exit"].nil?
continue
!params[:intervention]["save-and-exit"].nil?
params[:intervention]["save-and-exit"].nil?
params[:intervention]
continue
params[:intervention]["save-and-exit"].to_boolean
params[:intervention]["save-and-exit"].to_bool
params[:intervention]["save-and-exit"]
params[:intervention]
exit
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).map {|intervention| intervention.decode! }
session[:intervention_params]
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).map {|intervention| intervention.decode! }
session[:intervention_params]
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).count
continue
session[:intervention_params]
continue
session[:intervention_params]
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).count
continue
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).count
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"])
continue
session[:intervention_params]
continue
session[:intervention_params]
SessionHelper.parse(session)[:interventions].delete_if{|i| i["start"].to_datetime > SessionHelper.parse(session)[:entries].last[:date].to_datetime || i["end"].to_datetime < SessionHelper.parse(session)[:entries].first[:date].to_datetime }
SessionHelper.parse(session)[:interventions].each_with_index{|v,k| puts v.deep_merge!({"index" => (k)})}
(interventions + session[:intervention_params]).uniq
session[:intervention_params]
interventions
continue
session[:intervention_params][0]
session[:intervention_params]
interventions
continue
session[:intervention_params]
exit
session[:intervention_params]
session[:intervention_params][params[:edit_intervention]['index'].to_i] = params[:edit_intervention]
session[:intervention_params]
params[:edit_intervention]
continue
params[:edit_intervention]
continue
params[:edit_intervention]
continue
params[:edit_intervention]
session[:intervention_params]
continue
chart
@chart
exit
continue
User.find(session[:chart_params]["user_id"].to_i).interventions.where(chart_type: session[:chart_params]["type"])
session[:chart_params]
exit
session[:chart_data]
session
continue
params
continue
@chart
continue
exit
continue
table_data
table_Data
continue
exit
@blah.parsed_response["results"].first["id"]
@blah.parsed_response["results"].first["last_name"]
@blah.parsed_response["results"].first
@blah.parsed_response["response"].first
@blah.parsed_response
@blah
exit
@blah = HTTParty.get("https://api.test.elationemr.com/api/v1/appointments/?appt_time__gt=2013-10-09T07:00:00Z", basic_auth: auth, verify: false)
@blah = HTTParty.get("https://api.test.elationemr.com/api/v1/patients/", basic_auth: auth, verify: false)
@blah = HTTParty.get("https://api.test.elationemr.com/api/v1/bills/", basic_auth: auth, verify: false)
@blah = HTTParty.get("https://api.test.elationemr.com/api/v1/physician-users/", basic_auth: auth, verify: false)
@blah = HTTParty.get("https://api.test.elationemr.com/api/v1/physician-users/56/", basic_auth: auth, verify: false)
@blah = HTTParty.get("https://api.test.elationemr.com/api/v1/appointments/", basic_auth: auth, verify: false)
@blah = HTTParty.get(""https://api.test.elationemr.com/api/v1/appointments/", basic_auth: auth, verify: false)
    7:                          :basic_auth => auth, :verify => false)
@blah = HTTParty.get("https://api.test.elationemr.com/api/v1/appointments/?limit=50&offset=100", 
@blah
continue
@blah
continue
@chart
continue
@chart
exit
continue
@chart
u.notifications.create!
n = Notification.new
u.notifications.unread_by(u)
u.notifications.first
u.notifications
u
u = User.find 301
Notification.unread_by(User.find(301))
exit
 Notification.unread_by(User.find(301))
@notifications
Notification.create!
@notifications
continue
@user
continue
manual
continue
manual == true
manual
continue
manual ? 1 : 0
if manual
manual
exit
entries.first.blank?
entries.any?.blank?
entries.any?
entries.any.blank?
entries.blank?
entries
results.blank?
results
continue
@entries
session[:entry_params]["date"] ? 1 : 2
if session[:entry_params]["date"]
session[:entry_params]["date"]
session[:entry_params]
continue
parse_session[:entries].first[:date].to_datetime > parse_session[:interventions].first["end"].to_datetime
parse_session[:interventions].first["end"].to_datetime
parse_session[:interventions]
parse_session[:entries].first[:date].to_datetime
parse_session[:entries].first[:date]
parse_session[:entries].first
parse_session[:entries]
session[:intervention_params]
continuesession[:intervention_params]
continue
session[:intervention_params] = parse_session[:interventions].delete_if{|i| i["start"].to_datetime > parse_session[:entries].last[:date].to_datetime || i["end"].to_datetime < parse_session[:entries].first[:date].to_datetime }
session[:intervention_params] = parse_session[:interventions].each_with_index{|v,k| puts v.deep_merge!({"index" => (k)})}
session[:intervention_params] = (@interventions + session[:intervention_params]).uniq
parse_session
parse_Session
@interventions
continue
exit
continue
entry[:id]
entry
continue
entries["db_value"][symbol.parameterize.underscore][]
symbol.parameterize.underscore
symbol.parameterize
symbol
entries["db_value"]
entries
continue
entries
continue
exit
a.first[:id]exit
a.first[:id].deep_merge!({:hdl => 80})
a.first[:id]
a.first[:id].deep_merge!({:ldl => 60})
a.first[:id]
a[:id]
a.first.deep_merge!({id: {}})
a.deep_merge!({id: {}})
a = Array.new(5) { Hash.new }
a.first[:id].deep_merge!({:ldl => 1})
a = Array.new(5) { Hash.new }
a.first[:id].deep_merge!({:ldl => 1})
a.first[:id]
a.first
a = Array.new(5) { Hash.new(id: Hash.new) }
Array.new(5) { Hash.new(id: Hash.new) }
entries.first[:id]
entries.first
entries
continue
entries
entry[:id]
entry
entry[:id]
key.parameterize.underscore.to_sym
key.parameterize.underscore
key.parameterize
key
"#{entry[:id][key.parameterize.underscore.to_sym]}"
"entry[db_value[#{key.parameterize.underscore}[#{(index+1)}]]]"
continue
session[:chart_params]["type"].safe_constantize.parse_entries
session[:chart_params]["type"].safe_constantize
session[:chart_params]["type"]
continue
entry[:vitamin_d]
chart_class.safe_constantize.keys.each {|key| puts key.parameterize.underscore.to_sym  }
chart_class.safe_constantize.keys.each {|key| puts key  }
key
entry[key.parameterize.underscore.to_sym]
entry[key.parameterize.underscore]
entryentry[key.parameterize.underscore]
entry
continue
exit
continue
exit
continue
entries[i]
exit
continue
{key.parameterize('_').to_sym => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
{key.parameterize('_') => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
{key.underscore => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
{key.underscore.to_sym => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
{key.to_s.downcase.to_sym => result.value, :date => result.date.strftime("%Y-%m-%d").to_s}
"#{i}"
entries[i]
#{i}
i
exit
session[:entry_params]
continue
parse_session
session[:chart_params]["type"] == "Cholesterol"
parse_session[:entries]
session[:intervention_params] = parse_session[:interventions].delete_if{|i| i["start"].to_datetime > parse_session[:entries].last[:date].to_datetime || i["end"].to_datetime < parse_session[:entries].first[:date].to_datetime }
session[:intervention_params] = parse_session[:interventions].each_with_index{|v,k| puts v.deep_merge!({"index" => (k)})}
session[:intervention_params] = (@interventions + session[:intervention_params]).uniq
@interventions
