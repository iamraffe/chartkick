continue
@chart.persisted?
@chart.new_record?
@chart.changed?
continue
@chart.persisted?
@chart.persisted'
@chart.new_record?
@chart.changed?
@chart
continue
params[:chart][:user_id]
params[:chart][:user_od]
params[:chart][:type]
params[:chart]
params
continue
session[:chart_params]
chart_params
continue
@chart
continue
@chart
"hi" unless @chart.nil?
@chart.nil?
continue
exit
@chart.entries.uniq
@chart.entries
@chart.changed?
@chart.new_record? || !@chart.changed?
continue
@chart.new_record? || !@chart.changed?
@chart.changed?
continue
@chart.changed?
@chart.new_record? || !@chart.changed?
continue
!@chart.changed?
@chart.changed?
continue
@chart.new_record? || !@chart.changed?
@chart.changed?
@chart.new_record?
continue
@chart.current_step 
@chart.current_step > 1
@chart.current_step
@chart.new_record?
@chart.valid?
@chart
continue
session[:chart_params]["user_id"]
session[:chart_params]
continue
@chart.data
continue
@entries
continue
session[:entry_params]
continue
session[:entry_params]
session[:entry_params].deep_merge!(entry_params)
session
params
exit
continue
@entries
@chart.entries
@chart.user
@chart
continue
key.parameterize.underscore.to_sym
entry[key.parameterize.underscore.to_sym]
{entry[key.parameterize.underscore.to_sym]
entry
continue
entry
index
key
continue
manual
chart_class
entries
continue
Date.parse(JSON.parse(@intervention.to_json)["start"]).strftime("%Y-%m-%d")
Date.parse(JSON.parse(@intervention.to_json)["start"])
JSON.parse(@intervention.to_json)["start"]
JSON.parse(@intervention.to_json)
@intervention.to_json
@intervention
@intervention.to_a
@intervention.to_hash
@intervention.to_h
@intervention
continue
@intervention
continue
@intervention
b = a.to_json
a
a.start = a.start.strftime("%Y-%m-%d")
a.start
a = Intervention.find 1
a = Intervention.find 2
a = 2
in = Intervention.new
in = Intervention.find_by(id: 2)
i = Intervention.find_by(id: 2)
i = Intervention.find(2)
@intervention["start"]
@intervention
continue
@intervention
continue
@interventions
continue
@interventions
@type
continue
session[:chart_params]
continue
session[:intervention_params]
continue
session[:intervention_params][params[:edit_intervention]['index'].to_i]["title"]
session[:intervention_params][params[:edit_intervention]['index'].to_i]
session[:intervention_params]
continue
session[:intervention_params]
continue
@intervention
continue
charts.map{|c| c.parameterize("_").classify}
charts.map{|c| c.parameterize("_")}
charts.map{|c| c.parameterize}
charts.map{|c| c.tableize}
charts.map{|c| c.tableize.pluralize.classify}
charts.map{|c| c.tableize.classify}
charts.map{|c| c.}
charts.map{|c| c.titleize}
charts.push("Red Cell")
charts.map{|c| c.titleize}
charts.map{|c| c.camelize}
charts.map{|c| c.constantize}
charts.map{|c| c.classify}
charts.map!{|c| c.classify}
charts
continue
charts
continue
charts.empty?
charts
continue
charts
continue
JSON.parse(params[:filters][:my_patients])
params[:filters][:my_patients] == "true"
params[:filters][:my_patients] == true
params[:filters][:my_patients]?
params[:filters][:my_patients].true?
params[:filters][:my_patients]
continue
users
continue
users
continue
User.joins(:charts).distinct.where(charts: {type: charts}).first
continue
User.joins(:charts).distinct.where(charts: {type: charts}).first
User.joins(:charts).uniq.where(charts: {type: charts}).first
User.joins(:charts).uniq.where(charts: {type: charts})
continue
User.joins(:charts).uniq.where(charts: {type: charts})
users
continue
users
continue
users
continue
User.joins(:charts).where(charts: {type: ["Cholesterol", "AFP"]})
User.joins(:charts).where(charts: {type: ["AFP"]})
User.joins(:charts).where(charts: {type: ["Cholesterol", "AFP"]})
continue
User.joins(:charts).where(charts: {type: ["Cholesterol", "AFP"]}).first
User.where(id: Chart.select(:user_id).group(:user_id).where(type: ["Cholesterol", "AFP"]).having("count(type) = ?", 2))
User.where(id: Chart.select(:user_id).group(:user_id).where(type: ["AFP"]).having("count(type) = ?", 1))
users
continue
charts
users
continue
params[:filters][:charts]
params[:filters]
continue
params[:filters]
User.where(id: Chart.select(:user_id).group(:user_id).where(type: ["Cholesterol", "AFP"]).having("count(type) = ?", 2))
User.where(id: Chart.select(:user_id).group(:user_id).where(type: ["Cholesterol", "AFP"]).having("count(type) = ?", 4))
User.where(id: Chart.select(:user_id).group(:user_id).where(type: ["Cholesterol", "AFP", "VitaminD"]).having("count(type) = ?", 4))
User.where(id: Chart.select(:user_id).group(:user_id).where(type: ["Cholesterol", "AFP", "A"]).having("count(type) = ?", 3))
User.where(id: Chart.select(:user_id).group(:user_id).where(type: ["Cholesterol", "AFP", "A"]).having("count(type) = ?", 2))
User.joins(:charts).where(charts: {type: ["Cholesterol", "AFP", "VitaminD"]}).first
User.find(4).charts
User.where(id: Chart.select(:user_id).group(:user_id).where(type: ["Cholesterol", "AFP"]).having("count(type) = ?", 2))
User.joins(:charts).where(charts: {type: ["Cholesterol", "AFP"]}).first
User.joins(:charts).where(charts: {types: ["Cholesterol", "AFP"]}).first
User.joins(:charts).where(charts: {type: ["Cholesterol", "AFP"]}).first
User.joins(:charts).where(charts: {type: "Cholesterol"}).first
User.includes(:charts).where(types: ["Cholesterol"]).first
User.joins(:charts).where(types: ["Cholesterol"]).first
User.joins(:charts).where(types: ["Cholesterol"])
User.joins(:charts).where(type: "Cholesterol").first
User.joins(:charts).where(type: "Cholesterol").all
User.joins(:charts).where(type: "Cholesterol")
User.joins(:charts).where(type: ["Cholesterol"])
User.joins(:charts).first
User.joins(:charts)
User.joins(:charts).where(type: ["Cholesterol"])
User.joins(:charts).where(type: ["VitaminD"])
User.joins(:charts).where(type: ["AFP"])
User.includes(:charts).where(type: ["AFP"])
User.includes(:charts).where(type: "AFP")
User.includes(:charts).where(type: "Cholesterol")
User.includes(:charts).where(tyoe: "Cholesterol")
User.includes(:charts),where(tyoe: "Cholesterol")
User.includes(:charts)
continue
params
continue
parameters
continue
User.full_name(parameters[:term]).limit(10).order(last_name: :ASC)
continue
self.current_step
last_step?
continue
current_step
continue
current_step
@chart.current_step
continue
@chart.current_step
@chart
continue
current_step
continue
self.current_step = steps[steps.index(current_step)+2]
self.current_step
current_step
continue
user_id
user_od
@current_step
current_step
continue
current_step
@current_step
