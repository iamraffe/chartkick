exit
continue
entries["db_value"]["6"] == "1"
entries["db_value"]["5"] == "1"
continue
"#{i}"
continue
"#{i}"
continue
Entry.update(entries["db_value"][symbol.downcase]["#{i}"].to_i, {chart_id: chart.id})
chart.id
entries["db_value"]["#{i}"] == "1"
!entries["db_value"].nil?
"#{i}"
#{i}
entries["date"]
exit
"#{i}"
entries["db_value"]["#{i}"] 
entries["db_value"]
exit
 entries["db_value"]["#{i}"] == "1"
"#{i}"
i
entries["db_value"]["#{i}"].to_i
exit
entries["db_value"]
entries.keys.select{|key| key != "date" && key != "db_value" }.each{|symbol| puts entries["db_value"][symbol.downcase][]}
entries.keys.select{|key| key != "date" && key != "db_value" }
entries.keys
continue
entries.keys
symbol
continue
entries.keys.select{|key| key != "date"}
entries.keys
entries
continue
entry_params
exit
continue
session[:entry_params]
session[:chart_params]
exit
table_data
continue
size
exit
data
size
exit
continue
data
exit
entries.first[:id][:ldl]
entries[:id[:ldl]]
entries[:id][:ldl]
entries
continue
entries["db_value"]["2"] === "1"
entries["db_value"]["1"] === "1"
entries["db_value"]["1"] == "1"
entries["db_value"]["1"].to_bool.true?
entries["db_value"]["1"].true?
entries["db_value"]["1"]
entries
continue
ldl
continue
Entry.all
ldl[0]
ldl
exit
step
continue
entries
entry
continue
session[:entry_params].each{|key, value| value.delete_if {|k, v| value.size > 5 } }
session[:entry_params].each{|key, value| value.delete_if {|k, v| k=="1" } }
session[:entry_params].each{|key, value| value.delete_if {|k, v| k==1 } }
session[:entry_params].each{|key, value| value.delete_if {|k, v| v.empty? } }
session[:entry_params].each{|key, value| value.deep_merge!(value.keys[-5..-1].each{|k|  value[k.to_s] })}
session[:entry_params].each{|key, value| value = value.keys[-5..-1].each{|k|  value[k.to_s] }}
session[:entry_params].map{|key, value| value = value.keys[-5..-1].each{|k|  value[k.to_s] }}
session[:entry_params].each{|key, value| value = value.keys[-5..-1].each{|k|  value[k.to_s] }}
session[:entry_params].each{|key, value| value = value.keys[-5..-1].each{|k| puts value[k.to_s] }}
session[:entry_params].each{|key, value| value.keys[-5..-1].each{|k| puts value[k.to_s] }}
session[:entry_params].each{|key, value| value.keys[-5..-1].each{|k| value[k.to_s] }}
session[:entry_params]
session[:entry_params].map{|key, value| value.keys[-5..-1].each{|k| value[k.to_s] }}
session[:entry_params].map!{|key, value| value.keys[-5..-1].each{|k| value[k.to_s] }}
session[:entry_params]
session[:entry_params].map{|key, value| value.keys[-5..-1].each{|k| value[k.to_s] }}
continue
session[:entry_params].map{|key, value| value.keys[-5..-1].each{|k| value[k.to_s] }}
session[:entry_params].map{|key, value| puts value.keys[-5..-1]}
session[:entry_params]
session[:entry_params].each{|key, value| value =  value.keys[-5..-1]}
session[:entry_params].each{|key, value| puts value.keys[-5..-1]}
session[:entry_params].each{|key, value| puts value.keys[-1..-5]}
session[:entry_params].each{|key, value| puts value.keys[-1...-5]}
session[:entry_params].each{|key, value| puts value.keys[-1]}
session[:entry_params].each{|key, value| puts value.keys[-5]}
session[:entry_params].each{|key, value| puts value.keys[1..4]}
session[:entry_params].each{|key, value| puts value.pop}
session[:entry_params].each{|key, value| puts value.last(5)}
session[:entry_params].each{|key, value| puts value.size}
session[:entry_params].each{|key, value| puts value.take(5)}
session[:entry_params].each{|key, value| value.take(5)}
session[:entry_params].each{|key, value| value.take(-5)}
session[:entry_params]
continue
session[:chart_params]
session
continue
@entries
continue
@entries
continue
@ldl
continue
@interventions
@entries
continue
@entries
continue
Chart.last.interventions
Chart.first.interventions
exit
Chart.first.interventions
Chart.first
@chart.class
@chart.intervention
@chart.interventions
@chart
continue
redirect_to @chart
@chart
continue
clean
@chart
continue
@chart
continue
params
@chart.valid?
@chart
continue
exit
interventions
continue
params
continue
params
continue
params
@chart
@chart.new_record?
@chart.valid?
continue
session[:chart_params]
@chart.valid?
session[:chart_step]
session
continue
parse_session[:interventions].each_with_index{|v,k| puts v.deep_merge!({"index" => (k)})}
parse_session[:interventions].each_with_index{|v,k| puts v}
parse_session[:interventions].each_with_index{|k,v| puts v}
parse_session[:interventions].each_with_index{|k,v| puts k}
parse_session[:interventions].each_with_index{|(k,v),i| puts k}
parse_session[:interventions].each_with_index{|(k,v),i| puts v}
parse_session[:interventions].each{|(k,v),i| puts v}
parse_session[:interventions].each{|(k,v),i| puts i}
parse_session[:interventions].each{|(k,v),i| puts k}
parse_session[:interventions]
session[:intervention_params]
session[:interventions_params]
parse_session
continue
Base64.encode64(image.first.to_blob)
Base64.encode64(png)
png
svg
Base64.encode(png)
Base.64.encode(png)
image.first.to_blob
image
continue
format
continue
format
continue
img.first.write "example_out.png"
img.first.write
img.first.class
img.class
img.write
ls img
img
continue
img
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
params[:blob]
exit
continue
exit
interventions[0]["type"]
interventions
continue
@interventions_size
continue
params[:id]
session[:intervention_params]
session[:intervention_params][params[:id].to_i]
continue
params[:edit_intervention]['title']
session[:intervention_params][params[:id].to_i]["title"]
session[:intervention_params][params[:id].to_i]
session[:intervention_params][params[:id]]
session[:intervention_params]
params
continue
d3_session_data
exit
intervention_params[@index].deep_merge!({"id" => SecureRandom.hex})
intervention_params[@index]
intervention_params[@index].deep_merge({"id" => SecureRandom.hex})
SecureRandom.hex
intervention_params[@index]
intervention_params
exit
session[:intervention_params]
continue
session[:intervention_params]
continue
session[:intervention_params]
exit
params[:edit_intervention]
session[:intervention_params][params[:id].to_i]["type"] = "test"
session[:intervention_params][params[:id].to_i]["type"]
session[:intervention_params][params[:id].to_i]
session[:intervention_params]
exit
session[:intervention_params]
