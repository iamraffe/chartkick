continue
self.current_step
last_step?
continue
current_step
continue
current_step
@chart.current_step
continue
@chart.current_step
@chart
continue
current_step
continue
self.current_step = steps[steps.index(current_step)+2]
self.current_step
current_step
continue
user_id
user_od
@current_step
current_step
continue
current_step
@current_step
continue
session[:chart_step]
params[:back_button]
@chart.valid?
@chart.current_step
@chart
continue
current_step
@current_step
continue
session[:chart_step]
@chart.current_step
@chart
continue
current_step
continue
current_step
continue
current_step
continue
current_step
continue
current_step
user_id
continue
session[:chart_step]
continue
user_id
continue
params[:back_button]
@chart.last_step?
@chart.current_step
session[:chart_step]
@chart.valid?
@chart
continue
@chart.last_step?
session[:chart_step]
params[:back_button]
@chart.current_step
@chart.valid?
@chart
continue
current_step
@current_step || steps.first
@current_step || steps.second
@current_step || "naming"
@current_step
current_step
continue
current_step
@current_step
continue
@current_step
current_step
continue
current_step
@current_step
self
continue
self
user_id
@current_step
current_step
continue
current_step
@current_step
user_id.nil?
user_id
current_step
continue
current_step
continue
current_step
continue
current_step
@current_step
continue
current_step
continue
current_step
continue
current_step
continue
current_step
@current_step
continue
current_step
@current_step
continue
!user_id.nil?
user_id.nil?
@current_step
self
continue
session[:chart_params]
params
continue
chart_params
params
continue
self
continue
session[:chart_params]
self
self.user_id
user_id
@current_step
exit
active_record_get_autocomplete_items(parameters)
items = User.where(["first_name LIKE ? or last_name LIKE ? or concat(first_name, ' ', last_name) like ?", '%'+ query + '%', '%'+ query + '%','%'+ query + '%' ])
query = parameters[:term]
where(["first_name LIKE ? or last_name LIKE ? or concat(first_name, ' ', last_name) like ?", '%'+ query + '%', '%'+ query + '%','%'+ query + '%' ])
query
continue
parameters
continue
session[:entry_params].each{|key, value| puts value }
session[:entry_params]
continue
session[:entry_params].each{|key, value| value.delete_if {|k, v| }
session[:entry_params].each{|key, value| puts value }
session[:entry_params].each{|key, value| value.delete_if {|k, v| puts v} }
session[:entry_params]
v
continue
entries
continue
entries
continue
entries
continue
entries
continue
entries
continue
entries
continue
entries
continue
entries
continue
entries
continue
entries
continue
entries
continue
entries
continue
entries
continue
key
results
continue
Entry.build(session[:chart_params]["user_id"], session[:chart_params]["type"])
Entry.build(session[:chart_params]["user_id"], session[:chart_params]["type"]).first
Entry.build(session[:chart_params]["user_id"], session[:chart_params]["type"])
session[:entry_params]
session[:entry_params].deep_merge!(Entry.build(session[:chart_params]["user_id"], session[:chart_params]["type"]).first)
session[:entry_params].deep_merge!(Entry.build(session[:chart_params]["user_id"], session[:chart_params]["type"]))
session[:entry_params]
Entry.build(session[:chart_params]["user_id"], session[:chart_params]["type"])
session[:entry_params]
session
session[:intervention_params]
session[:chart_params]
continue
entries
exit
entries
continue
index
chart_class.safe_constantize.keys
chart_class
continue
@intervention.to_json
@intervention
continue
!params[:intervention]["save-and-exit"].nil?
continue
!params[:intervention]["save-and-exit"].nil?
continue
!params[:intervention]["save-and-exit"].nil?
continue
!params[:intervention]["save-and-exit"].nil?
params[:intervention]["save-and-exit"].nil?
params[:intervention]
continue
params[:intervention]["save-and-exit"].to_boolean
params[:intervention]["save-and-exit"].to_bool
params[:intervention]["save-and-exit"]
params[:intervention]
exit
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).map {|intervention| intervention.decode! }
session[:intervention_params]
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).map {|intervention| intervention.decode! }
session[:intervention_params]
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).count
continue
session[:intervention_params]
continue
session[:intervention_params]
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).count
continue
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"]).count
Intervention.where(user_id: session[:chart_params]["user_id"].to_i).where(chart_type: session[:chart_params]["type"])
continue
session[:intervention_params]
continue
session[:intervention_params]
SessionHelper.parse(session)[:interventions].delete_if{|i| i["start"].to_datetime > SessionHelper.parse(session)[:entries].last[:date].to_datetime || i["end"].to_datetime < SessionHelper.parse(session)[:entries].first[:date].to_datetime }
SessionHelper.parse(session)[:interventions].each_with_index{|v,k| puts v.deep_merge!({"index" => (k)})}
(interventions + session[:intervention_params]).uniq
session[:intervention_params]
interventions
continue
session[:intervention_params][0]
session[:intervention_params]
interventions
continue
session[:intervention_params]
exit
session[:intervention_params]
session[:intervention_params][params[:edit_intervention]['index'].to_i] = params[:edit_intervention]
session[:intervention_params]
params[:edit_intervention]
continue
params[:edit_intervention]
continue
params[:edit_intervention]
